# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Main_Window.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sqlite3,sys
from smbus2 import SMBus
from mlx90614 import MLX90614
import os,csv,cv2
import numpy as np
from pathlib import Path
import time
import datetime
import pandas as pd
import pickle
import re
import imutils
import glob
import face_recognition

from PyQt5 import QtCore, QtGui, QtWidgets
from login import Ui_Login


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(1366, 768)
        #MainWindow.setMaximumSize(QtCore.QSize(802, 611))
        font = QtGui.QFont()
        font.setKerning(True)
        MainWindow.setFont(font)
        MainWindow.setStyleSheet("")
        MainWindow.setAnimated(True)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setEnabled(True)
        self.centralwidget.setMaximumSize(QtCore.QSize(1366, 768))
        self.centralwidget.setObjectName("centralwidget")
        self.recog = QtWidgets.QPushButton(self.centralwidget)
        self.recog.setGeometry(QtCore.QRect(500, 420, 91, 41))

#         self.facerecognition()
        self.recog.clicked.connect(self.recb)


        self.recog.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.recog.setStyleSheet("font: 12pt \"Sitka\";\n"
"border-radius: 10px;\n"
"background-color: rgb(255, 255, 255);")
        self.recog.setCheckable(False)
        self.recog.setObjectName("recog")
        self.admin = QtWidgets.QPushButton(self.centralwidget)
        self.admin.setGeometry(QtCore.QRect(790, 420, 91, 41))

        self.admin.clicked.connect(self.logb)

        self.admin.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.admin.setMouseTracking(False)
        self.admin.setTabletTracking(False)
        self.admin.setStyleSheet("font: 12pt \"Sitka\";\n"
"border-radius: 10px;\n"
"background-color: rgb(255, 255, 255);")
        self.admin.setObjectName("admin")
        self.logo = QtWidgets.QLabel(self.centralwidget)
        self.logo.setGeometry(QtCore.QRect(570, 130, 221, 201))
        self.logo.setText("")
        self.logo.setPixmap(QtGui.QPixmap("background/nemco_logo1.jpg"))
        self.logo.setScaledContents(True)
        self.logo.setWordWrap(False)
        self.logo.setObjectName("logo")
        self.background = QtWidgets.QLabel(self.centralwidget)
        self.background.setGeometry(QtCore.QRect(0, 0, 1366, 768))
        self.background.setText("")
        self.background.setPixmap(QtGui.QPixmap("background/minimalist-4k-wallpaper-hd-15-920x518.jpg"))
        self.background.setScaledContents(True)
        self.background.setObjectName("background")
        self.background.raise_()
        self.recog.raise_()
        self.admin.raise_()
        self.logo.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.recog.setText(_translate("MainWindow", "Recognition"))
        self.admin.setText(_translate("MainWindow", "Admin"))

    def logb(self):
        self.logwindow()
        
    def logwindow(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_Login()
        self.ui.setupUi(self.window)
        self.window.showMaximized()
    
    def recb(self):
        self.facerecognition()
        
    
    def facerecognition(self):
    
        FONT=cv2.FONT_HERSHEY_COMPLEX
        global flag_face_recognised
        flag_face_recognised = False  # to keep track if the user face is recognized
        global flag_face_not_recognised
        flag_face_not_recognised = False
        images=[]
        global name
        global x1
        global x2
        global y1
        global y2
        global facelocation
        global frame
        names=[]
        tries = 0
        max = 4
        path = "/home/admin/Desktop/Thesis/dataset/*.*"
        
        for file in glob.glob(path):
            image = cv2.imread(file)
            a=os.path.basename(file)
            b=os.path.splitext(a)[0]
            names.append(b)
            images.append(image)

        def encoding1(images):
            encode=[]

            for img in images:
                unk_encoding = face_recognition.face_encodings(img)[0]
                encode.append(unk_encoding)
            return encode    

        encodelist=encoding1(images)
           
        cap =cv2.VideoCapture(0)
        #width, height  = cap.get(3), cap.get(4)
    
        while True:
            ret,frame=cap.read()
            frame1=cv2.resize(frame,(0,0),None,0.25,0.25)
            face_locations = face_recognition.face_locations(frame1)
            curframe_encoding = face_recognition.face_encodings(frame1,face_locations)
            for encodeface,facelocation in zip(curframe_encoding,face_locations):
                results = face_recognition.compare_faces(encodelist, encodeface)
                distance= face_recognition.face_distance(encodelist, encodeface)
                match_index=np.argmin(distance)
                
                x1,y1,x2,y2=facelocation
                x1,y1,x2,y2=x1*4,y1*4,x2*4,y2*4
                
                
                if True in results:
                    name=names[match_index]
                    self.firstname()
                    self.vaccine()
                    self.attendance()
#                     self.markAttendance()
                    self.updatetemp()
                    
                else:
                    cv2.rectangle(frame,(y1,x1),(y2,x2),(0,0,255),3)
                    cv2.putText(frame,"Unknown",(y2+6,x2-6),cv2.FONT_HERSHEY_COMPLEX,1,(255,0,255),2)
                    #print("Unknown")
                    
                    flag_face_not_recognised = True
                     
                  
       
            # display the image to our screen

            cv2.imshow("Facial Recognition is Running", frame)
            
            key = cv2.waitKey(1) & 0xFF
                
            # quit when 'q' key is pressed
            if key == ord("q"):
                break
        cap.release()
        cv2.destroyAllWindows()


    def connection(self):
            try:
                conn = sqlite3.connect("manage.db")
            except:
                print("cannot connect to the database")
            return conn


    def firstname(self):
            conn = self.connection()
            cur = conn.cursor()

            idd = name

            quary = 'SELECT FIRST_NAME FROM Management WHERE STUDENT_ID =\'' + idd + "\'"
            cur.execute(quary)
            result = cur.fetchall()
            
            if cur.execute(quary):
                for y in cur.execute(quary):
                    #print(y)
                    global fname
                    fname =re.sub(r'[^\w]'," ", str(y))
                    #global name2
                    #name2 = str(vacs)
                    #print(name2)
                    cv2.rectangle(frame,(y1,x1),(y2,x2),(0,128,0),3)
                    cv2.putText(frame,fname,(y2-30,x2+25),cv2.FONT_HERSHEY_COMPLEX,1,(255,0,255),2)
                    flag_face_recognised = True
            else:
                #self.un_id()
                print ("dili register")
               

    def vaccine(self):
            conn = self.connection()
            cur = conn.cursor()

            idd = name
          

            quary = 'SELECT Status FROM Management WHERE STUDENT_ID =\'' + idd + "\'"
            cur.execute(quary)
            result = cur.fetchone()
            #print(result)
            
            if cur.execute(quary):
                for y in result:
                    #print(y)
                    vacs =re.sub(r'[^\w]'," ", str(y))
                    global vac
                    vac = str(vacs)
                    #print(type(vac))
                    #print(vac)
                    cv2.rectangle(frame,(y1,x1),(y2,x2),(0,128,0),3)

                    if vac == "Fully Vaccinated with Booster":
                      #  print("Sija kay "+vac)
                        #print("Vaccinated")
                        cv2.putText(frame,"Fully Vaccinated w/ Booster",(y2-8,x2+50),cv2.FONT_HERSHEY_COMPLEX,1,(255,0,255),2)
                    
                    elif vac == "Fully Vaccinated":
                      #  print("Sija kay "+vac)
                        #print("Vaccinated")
                        cv2.putText(frame,"Fully Vaccinated",(y2-8,x2+50),cv2.FONT_HERSHEY_COMPLEX,1,(255,0,255),2)
                    
                    elif vac == "1st Dose Only":
                      #  print("Sija kay "+vac)
                        #print("Vaccinated")
                        cv2.putText(frame,"1st Dose Only",(y2-8,x2+50),cv2.FONT_HERSHEY_COMPLEX,1,(255,0,255),2)
                    
                    else:
                    #elif vac == 'NO':
                        #print ("dili vaccinated")
                        cv2.putText(frame,"UnVaccinated",(y2-8,x2+50),cv2.FONT_HERSHEY_COMPLEX,1,(255,0,255),2)
            else:
                #self.un_id()
                print ("dili ")
                
    def updatetemp(self):
#         if(GPIO.input(18)==0):
        
        bus = SMBus(1)
        sensor = MLX90614(bus, address=0x5A)
        
        celcius = sensor.get_object_1();
        faren = (celcius*1.8)+32
        ambient = sensor.get_ambient()
        
        cv2.putText(frame,str(round(ambient, 2)),(y2-8,x2+80),cv2.FONT_HERSHEY_COMPLEX,1,(255,0,255),2)
#         self.MainWindow.after(self.delay, self.update)
     
    def attendance(self):
            j = 0
            i = 0
            col_names = ['Name', 'ID', 'Vaccinated', 'Date', 'Time']
            
            ts = time.time()
            date = datetime.datetime.fromtimestamp(ts).strftime('%d-%m-%Y')
            timeStamp = datetime.datetime.fromtimestamp(ts).strftime('%H:%M:%S')

            ID = name
            nameko = fname
            vaccine = vac

            attendance = [str(ID), nameko, vaccine, str(date), str(timeStamp)]

            ts = time.time()
            date = datetime.datetime.fromtimestamp(ts).strftime('%d-%m-%Y')
            exists = os.path.isfile("/home/admin/Desktop/Thesis/Attendance/Attendance_" + date + ".csv")
            with open("/home/admin/Desktop/Thesis/Attendance_" + date + ".csv", 'a+') as csvFile1:
                if exists:
                    with open("/home/admin/Desktop/Thesis/Attendance/Attendance_" + date + ".csv", 'a+') as csvFile1:
                        myDataList = csvFile1.readlines()
                        writer = csv.writer(csvFile1)
                        nameList = []
                        for line in myDataList:
#                             writer.writerow(col_names)
                            entry = line.split(',')
                            nameList.append(entry[0])
                            print(entry)
                        if ID not in nameList:
#                         now = datetime.now()
#                         dtString = now.strftime('%H:%M:%S')
#                         writer.writerow(col_names)
                            csvFile1.writelines(f'\n{nameko},{str(ID)},{vaccine},{str(date)},{str(timeStamp)}')
#                             writer.writerow(attendance)
#                         writer = csv.writer(csvFile1)
#                         writer.writerow(col_names)
#                         writer.writerow(attendance)
                    csvFile1.close()
                else:
                    with open("/home/admin/Desktop/Thesis/Attendance/Attendance_" + date + ".csv", 'a+') as csvFile1:
                        myDataList = csvFile1.readlines()
                        writer = csv.writer(csvFile1)
                        nameList = []
                        for line in myDataList:
                            writer.writerow(col_names)
                            entry = line.split(',')
                            nameList.append(entry[0])
                            print(entry)
                        if ID not in nameList:
#                         now = datetime.now()
#                         dtString = now.strftime('%H:%M:%S')
                            
                            csvFile1.writelines(f'/n{nameko},{str(ID)},{vaccine},{str(date)},{str(timeStamp)}')
#                             writer.writerow(attendance)
#                         writer = csv.writer(csvFile1)
#                         #writer.writerow(col_names)
#                         writer.writerow(attendance)
                    csvFile1.close()
            csvFile1.close()
      
    def markAttendance(self):
        with open('Attendance.csv','r+') as f:
            myDataList = f.readlines()
            nameList = []
            for line in myDataList:
                entry = line.split(',')
                nameList.append(entry[0])
                if name not in nameList:
                    #now = datetime.now()
                    ts = time.time()
                    date = datetime.datetime.fromtimestamp(ts).strftime('%d-%m-%Y')
                    #dtString = now.strftime('%H:%M:%S')
                    f.writelines(f'\n{name},{date}')

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
#     MainWindow.show()
    MainWindow.showMaximized()
    sys.exit(app.exec_())
